use super::ticket::Ticket;
use super::validation;
use hdk::prelude::*;
use holochain_entry_utils::HolochainEntry;

#[derive(Serialize, Deserialize, Debug, DefaultJson, Clone)]
pub struct Catalog {
    pub course_title: String,
    pub course_id: String, // it is not entry_address, just a unique id for DNA that generated by Teacher
    pub teacher_address: Address,
    pub publish_time: usize,
    pub price: PaymentInfo,
}

#[derive(Serialize, Deserialize, Debug, DefaultJson, Clone)]
pub enum PaymentInfo {
    Free { ticket: Ticket },
    PyamentOptions { payment_info_address: Address },
}

impl HolochainEntry for Catalog {
    fn entry_type() -> String {
        String::from("attestation")
    }
}

impl Catalog {
    pub fn new(
        course_title: String,
        course_id: String,
        teacher_address: Address,
        publish_time: usize,
        price: PaymentInfo,
    ) -> Self {
        Catalog {
            course_title,
            course_id,
            teacher_address,
            publish_time,
            price,
        }
    }
}
pub const LINK_AGENT_ADDRESS_TO_CATALOG: &str = "AgentAddress->Catalogs";

pub fn catalog_entry_def() -> ValidatingEntryType {
    entry!(
        name: Catalog::entry_type(),
        description:"A catalog for each course in Index",
        sharing: Sharing::Public,
        validation_package:||{
            hdk::ValidationPackageDefinition::Entry
        },
        validation:|validation_data: hdk::EntryValidationData<Catalog>|{
            match validation_data{
                EntryValidationData::Create { entry, validation_data } => {
                   validation::create(entry,validation_data)?;
                    Ok(())
                },
                EntryValidationData::Modify { new_entry, old_entry,old_entry_header, validation_data } => {
                    validation::modify( new_entry,old_entry,old_entry_header,validation_data,)?;
                    Ok(())
                },
                EntryValidationData::Delete {old_entry,old_entry_header, validation_data } => {
                 validation::delete(old_entry, old_entry_header, validation_data)?;
                    Ok(())
                }
            }
                },
                links:[
                    from!( "%agent_id",
                                    link_type: LINK_AGENT_ADDRESS_TO_CATALOG,
                                    validation_package: || {
                                        hdk::ValidationPackageDefinition::Entry
                                    },
                                    validation: | _validation_data: hdk::LinkValidationData | {
                                        // TODO: Just AGENT can create a link from his ADDRESS to a CATALOG
                                        Ok(())
                                    }
                                )
                ]
    )
}
